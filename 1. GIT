GIT: GLOBAL INFORMATION TRACKER.

VCS: VERSION CONTROL SYSTEM
it will keep the code separately for each version.

v-1	: 100 lines --- > store (repo-1)
v-2	: 200 lines --- > store (repo-2)
v-3	: 300 lines --- > store (repo-3)

REPO: It is a folder where we store our code.
index.html: it is a basic file for every applications

v1 --- > index.html
v2 --- > index.html
v3 --- > index.html 


INTRO:
Git is used to track the files.
It will maintain multiple versions of the same file.
It is platform-independent.
It is free and open-source.
They can handle larger projects efficiently.
It is 3rd generation of vcs.
it is written on c programming
it came on the year 2005


CVCS: CENTRALIZED VERSION CONTROL SYSTEM
EX: SVN: it can store code on a single repo.

DVCS: DISTRIBUTED VERSION CONTROL SYSTEM
EX: GIT: it can store code on Multiple repo.


ROLLBACK: Going back to the previous version of the application.


STAGES:
WORKING DIRECTORY: where we write our source code.
STAGING AREA: we track files here.
REPOSITORY: where we store tracked source code


WORKING WITH GIT:
create a ec2 server:
mkdir swiggy
cd swiggy

yum install git -y  [yum=pkg manager, install=action, git=pkg name -y=yes]
git -v	: to check version
git init : to install .git (local repo)


To create file	: vim index.html (content is opt)
to check status	: git status
to track file	: git add index.html
to check status	: git status
to store file	: git commit -m "commit-1" index.html

create a file -- > add -- > commit 

to show commits	: git log
to show	last 2 commits: git log -2
to show commits in single line: git log -2 --oneline


=================================================

CONFIGURING USER AND EMAIL:

git config user.name "raham"
git config user.email "raham@gmail.com"


NOTE: this user and email will be replicated to new commits only.


Git show: used to show the files which are attached to commits.
git log --online
git show commit_id


BRANCHES:
It is a individaual line of developemt.
developers write the code on branches.
initally baraches we create on git.
after write source code on git we push to github.
Default barnch is Master.
Note: when we do a iniatl commit the only default branch will be created.

Dev -- > Git (Movies branch) -- > code -- > github


COMMNDS:
git branch		: to list the branches
git branch movies	: to create the branch movie
git checkout movies	: to switch blw the branches
git checkout -b dth	: to create and switch dth at same time
git branch -m old new	: to rename a branch
git branch -D recharge	: to delete a branch

NOTE: to recover the delete branch

GIT PULL: it will get the branch from github to git
git pull origin recharge
git checkout recharge




PROCESS:
git branch movies
git checkout movies
touch movies{1..5}
git add movies*
git commit -m "dev-1" movies*


NOW PUSH THE CODE TO GITHUB:
create a repo
git remote add origin https://github.com/nayakdebasish091/paytm.git

PUSH: to send files form git to github
local: .git & remote: paytm.git
git push origin movies
username:
password:

TOKEN GENERATION: 
account -- > settings -- >developer settings -- > PAT -- > Classic -- > Generate new token -- > classic -- > name: abcd -- > select 6 options -- > generate 

Note: it will be visible only once





create branch
switch to branch
files
add
commit
push

GIT IGNORE: it will not track the files which we want.
touch java{1..5}
vim .gitignore
j* -- > :wq
git status
you cant see the files now 


GIT RESTORE: to untrack the tracked file
touch raham
git status
git add
git status
git restore --staged raham
git status


GET BACK THE DELETED FILE:
Note: we can restore only tracked files.


HISTORY:


=================================================
MERGE:
adding the files blw one branch to another branch
git merge branch_name

REBASE:
adding the files blw one branch to another branch
git rebase branch_name


MERGE VS REBASE:
merge will show files, rebase will not show files
merge will not show branches, rebase will show branches
merge will show entire history, rebase will not.


STASH: to hide the files which are not comitted.
note: file need to be tracked but not comitted


touch file2
git stash
git stash apply
git stash list
git stash clear
git stash pop (clears last stash)




==================================================================

MERGE CONFLICT:
when we try to merege 2 branches with same file and Different content
then conflict will raise.
so we need to reslove the conflict manually


CHERRY-PICK: 
we can merge only specific files from one branch to another
with the help of commit_id
git cherry-pik commit_id

SHOW:
to show the commits for a file
git show commit_id

git log --patch
git log --stat


REVERT: to undo the merging
git revert branc_name

HISTORY:



INTERVIEW QUESTIONS:
what is git & why to use ?
Explain stages of git ?
Diff blw CVCS & DVCS ?
How to check commits in git ?
Explain branches ?
What is .gitingore ?
Diff blw git pull vs git push ?
Diff blw git pull vs git fetch ?
Diff blw git merge vs git rebase ? 
Diff blw git merge vs git cherry pick ?
Diff blw git clone vs git pull ?
Diff blw git clone vs git fork ?
Diff blw git revert vs git restore ?
merge conflict & how to resolve ?
what is git stash ?



